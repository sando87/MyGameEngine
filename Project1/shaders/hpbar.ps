
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer BasicBuffer : register(b0)
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
    float4 g_ambient;
    float4 g_diffuse;
	float4 g_specular;
	float4 g_shininess;
    float4 g_position;
    float4 g_direction;
	float4 g_color;
	float4 g_reserve;
    float4 g_uvInfo;
	float4 texels[12];
};


struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 tex : TEXCOORD0;
    float4 color : COLOR;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 jPS(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 outColor;
	float2 texel;

    // 이 텍스처 좌표 위치에서 샘플러를 사용하여 텍스처에서 픽셀 색상을 샘플링합니다.
	texel.x = input.tex.x;
	texel.y = input.tex.y;
    textureColor = shaderTexture.Sample(SampleType, texel);

    // 빛의 강도와 결합 된 확산 색을 기준으로 최종 색상의 최종 색상을 결정합니다.
    outColor = saturate(input.color * textureColor);
	
	if(texel.x < input.tex.z)
		outColor.w = 1.0;
	else
		outColor = float4(0,0,0,1);
		
    return outColor;
}
