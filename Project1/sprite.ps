/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;


cbuffer MaterialBuffer : register(b0)
{
    float4 g_ambient;
    float4 g_diffuse;
	float4 g_specular;
	float4 g_shininess;
};

cbuffer UVIndex : register(b1)
{
    float4 g_uvInfo;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 jPS(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 color;
	float2 tex_fixed;

	tex_fixed.x = (g_uvInfo.x * g_uvInfo.z) + input.tex.x; //(idxX * stepX) + offX
	tex_fixed.y = (g_uvInfo.y * g_uvInfo.w) + input.tex.y; //(idxY * stepY) + offY
    textureColor = shaderTexture.Sample(SampleType, tex_fixed);

    color = g_ambient * textureColor;

    return color;
}
