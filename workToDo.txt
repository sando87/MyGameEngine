BaseEngine
Render
Input
Math
Cache
Astar
Animation
Collision
Resource
=========
- 중복된 Vertex제거를 위한 index드로잉 방식으로 개선이 필요
//- jMesh, jImage, jAnim OnLoad시 자체 캐쉬 필요
- GameObject 생성 및 소멸 매커니즘 정리 필요(추가로 다른 객체들도...)
- parser -> obj dump에 해더 추가필요
//- transport 컴포넌트화 필요...
//- shader rendering, params 정리필요
//- GameObject, Component Loading시스템 개선 필요
//- GameObject Naiming 시스템 정리 필요
- 경로 정리
//- input시스템도 컴포넌트화 필요
Terrain
Combat Game Logic
(enemy AI, regen, attack, health, death...)
Effect
Sound
UI system
==========
network
database
Physics
==========
고려해볼만한 사항...
- 기본적으로 엔진 클래스는 사용자가 new delete 하지 않도록..
- 싱글톤은 uniqu_ptr -> GetInst반환은 weak_ptr
- Cache와 같은 리소스 관리자는 shared_ptr -> Cache반환도 shared_ptr
- ObjMgr의 객체들은 shared_ptr -> FindObj반환은 weak_ptr
- GameObject 빌더 디자인 패턴 사용 반환값은 weak
- ObjectComponent 빌더 디자인 패턴 사용 반환값은 weak


====namiong convention====
파일명이 담기는 변수 관련
- fullname : 경로명 + 파일명 (D:/temp/example.txt)
- filename : 파일명 (example.txt)
- pathname : 경로명 (D:/temp/) , 주의할 점은 끝에 /까지 붙인다
- extname  : 확장자명(txt)
- 확장자가 없는 경우는 취급하지 않음

순서
OnLoad of jGameObject //다른 Obj, Comp류 참조 불가능
OnLoad of jComponent //참조는 가능하나 로딩된 데이터 참조는 불가능
OnStart of jGameObject //참조도 데이터도 접근 가능
OnUpdate of jGameObject

class멤버함수
- m변수명

- struct , class 구분은 struct는 단순 데이터 모음(동적인 느낌이 없이 단순 get,set 수준) 사용, 나머진 class 사용

- 함수작성시
- 함수 내용 코딩시 실제 핵심 코드 루틴이 한눈에 들어올 수 있도록 작성(예외처리나 변수 선언 등은 1~2줄로 정리 필요)

- 구현해야하는 기능 및 입력 데이터에 따른 적절한 자료구조를 선정할 수 있는 역량
- 추상적인 개념으로 봐서 선형성일 경우 binarySearch를 적용할 수 있는 역량
- 람다 , 함수포인터 차이??
- EventHandling방식 구현 경험??